from abc import ABC, abstractmethod

class VectorDatabase(ABC):
    """
    向量数据库操作
    """

    @abstractmethod
    def dbType(self) -> str:
        """
        Return the type of the database.
        """
        raise NotImplementedError("Not implemented")

    @abstractmethod
    def health(self) -> dict:
        """
        Return the health status of the database.
        """
        raise NotImplementedError("Not implemented")
    
    @abstractmethod
    def createCollection(self, collectionName: str, knowledgebaseId: str, vectorSize: int):
        """
        Create a collection with given name
        """
        raise NotImplementedError("Not implemented")

    @abstractmethod
    def deleteCollection(self, collectionName: str, knowledgebaseId: str):
        """
        Delete a collection with given name
        """
        raise NotImplementedError("Not implemented")

    @abstractmethod
    def collectionExist(self, collectionName: str, knowledgebaseId: str) -> bool:
        """
        Check if a collection with given name exists
        """
        raise NotImplementedError("Not implemented")

    """
    Table operations
    """
    @abstractmethod
    def search(self, collection_name: str, data: list, limit: int, search_params, output_fields) -> list:
        """
        Search for similar vectors in the specified table.
        """
        raise NotImplementedError("Not implemented")
    
    @abstractmethod
    def get(self, collection_name: str, id: str) -> dict:
        """
        Get a vector by its ID from the specified table.
        """
        raise NotImplementedError("Not implemented")
    
    @abstractmethod
    def insert(self, collection_name: str, data: list) -> str:
        """
        Insert a new vector into the specified table.
        """
        raise NotImplementedError("Not implemented")
    
    @abstractmethod
    def update(self, collection_name: str, id: str, data: list) -> bool:
        """
        Update an existing vector in the specified table.
        """
        raise NotImplementedError("Not implemented")
    
    @abstractmethod
    def delete(self, collection_name: str, filter: str) -> bool:
        """
        Delete a vector by its ID from the specified table.
        """
        raise NotImplementedError("Not implemented")
    
    #     """
    # SQL
    # """
    # @abstractmethod
    # def sql(sql: str, fetch_size: int, format: str):
    #     """
    #     Run the sql generated by text-to-sql
    #     """
    #     raise NotImplementedError("Not implemented")
